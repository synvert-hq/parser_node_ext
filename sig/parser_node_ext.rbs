module ParserNodeExt
  VERSION: String
  # See the writing guide of rbs: https://github.com/ruby/rbs#guides

  def arguments: () -> Array[Parser::AST::Node]
  def arguments_count: () -> Integer
  def begin: () -> Parser::AST::Node
  def body: () -> Array[Parser::AST::Node]
  def caller: () -> Parser::AST::Node
  def elements: () -> Array[Parser::AST::Node]
  def else_statement: () -> Parser::AST::Node
  def exceptions: () -> Array[Parser::AST::Node]
  def end: () -> Parser::AST::Node
  def ensure_body: () -> Array[Parser::AST::Node]
  def expression: () -> Parser::AST::Node
  def old_name: () -> Symbol
  def options: () -> Parser::AST::Node
  def operator: () -> Symbol
  def if_statement: () -> Parser::AST::Node
  def in_statements: () -> Array[Parser::AST::Node]
  def key: () -> Parser::AST::Node
  def guard: () -> Parser::AST::Node
  def left_value: () -> Parser::AST::Node | Symbol
  def message: () -> Symbol
  def name: () -> Parser::AST::Node | Symbol
  def new_name: () -> Symbol
  def pairs: () -> Array[Parser::AST::Node]
  def parent_class: () -> Parser::AST::Node
  def receiver: () -> Parser::AST::Node
  def rescue_bodies: () -> Array[Parser::AST::Node]
  def right_value: () -> Parser::AST::Node
  def self: () -> Parser::AST::Node
  def value: () -> Parser::AST::Node
  def variable: () -> Parser::AST::Node
  def when_statements: () -> Array[Parser::AST::Node]

  def to_hash: () -> Hash
end
